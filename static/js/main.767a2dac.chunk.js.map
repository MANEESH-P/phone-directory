{"version":3,"sources":["components/header.js","components/contact.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","class","Component","Contact","deleteContact","this","props","data","map","contact","react_animation_components","in","className","Media","tag","body","heading","name","number","Button","color","onClick","Main","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isModalOpen","toggleModal","bind","assertThisInitialized","handleSubmit","d","index","indexOf","splice","setState","event","preventDefault","push","value","field","defineProperty","fieldName","target","fieldValue","_this2","header","type","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","htmlFor","Input","id","innerRef","input","onChange","onFieldChange","components_contact","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.767a2dac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <nav class=\"navbar navbar-dark bg-dark\">\n          <span class=\"navbar-brand mb-0 h1 center\">Phone Directory</span>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Fade } from \"react-animation-components\";\nimport { Media, Button } from \"reactstrap\";\n\nclass Contact extends Component {\n  render() {\n    var deleteContact = this.props.deleteContact;\n    const leadercontent = this.props.data.map(contact => {\n      return (\n        <Fade in>\n          <div className=\"col-12 mt-5\">\n            <Media tag=\"li\">\n              <Media body className=\"col-3 ml-12 contactcards\">\n                <Media heading>Name :{contact.name}</Media>\n                <p>Number :{contact.number}</p>\n                <Button\n                  color=\"danger\"\n                  onClick={() => {\n                    deleteContact(contact);\n                  }}\n                >\n                  Delete\n                </Button>\n              </Media>\n            </Media>\n          </div>\n        </Fade>\n      );\n    });\n    return leadercontent;\n  }\n}\nexport default Contact;\n","import React, { Component } from \"react\";\nimport Header from \"./header\";\nimport Contact from \"./contact\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"bootstrap-social/bootstrap-social.css\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      isModalOpen: false\n    };\n\n    this.toggleModal = this.toggleModal.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.deleteContact = this.deleteContact.bind(this);\n  }\n  deleteContact(contact) {\n    var d = this.state.data;\n    var index = d.indexOf(contact);\n    if (index > -1) {\n      d.splice(index, 1);\n    }\n    this.setState({\n      data: d\n    });\n  }\n\n  toggleModal() {\n    this.setState({\n      isModalOpen: !this.state.isModalOpen\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.toggleModal();\n    var d = this.state.data;\n    d.push({\n      name: this.name.value,\n      number: this.number.value\n    });\n    this.setState({\n      data: d\n    });\n  }\n\n  onChange(field, value) {\n    this.setState({ [field]: value });\n  }\n\n  onFieldChange(event) {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n    this.setState({ [fieldName]: fieldValue });\n  }\n\n  render() {\n    var deleteContact = this.deleteContact;\n    return (\n      <div>\n        <Header />\n        <button\n          type=\"button\"\n          class=\"btn btn-primary addcontact\"\n          onClick={this.toggleModal}\n        >\n          Add Contact +\n        </button>\n\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n          <ModalHeader toggle={this.toggleModal}>Add Contact</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.handleSubmit}>\n              <FormGroup>\n                <Label htmlFor=\"name\">Contact Name</Label>\n                <Input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  innerRef={input => (this.name = input)}\n                  onChange={this.onFieldChange.bind(this)}\n                  data={this.state.data.name}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label htmlFor=\"number\">Phone Number</Label>\n                <Input\n                  type=\"text\"\n                  id=\"number\"\n                  name=\"number\"\n                  innerRef={input => (this.number = input)}\n                  onChange={this.onFieldChange.bind(this)}\n                  data={this.state.data.number}\n                />\n              </FormGroup>\n              <h4 className=\"font-weight-light\">Subscriber to be added -</h4>\n              <p>Name: {this.state.name}</p>\n              <p>Number: {this.state.number}</p>\n              <Button type=\"submit\" value=\"submit\" color=\"primary\">\n                Add\n              </Button>\n            </Form>\n          </ModalBody>\n        </Modal>\n        <Contact\n          deleteContact={deleteContact.bind(this)}\n          data={this.state.data}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport Main from \"./components/main\";\nimport \"./App.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"*\" component={Main} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}